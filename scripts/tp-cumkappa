#!/usr/bin/env python3

import argparse

parser = argparse.ArgumentParser(
         description='Plot cumulative kappa against frequency or mean '
                     'free path. Properties such as colour and '
                     'linestyle loop, so if you have two data files '
                     'and two directions, only two colours need to be '
                     'specified, one for each direction; however if '
                     'you want one for each datafile, each will need '
                     'to be repeated twice consecutively.')
parser.add_argument('file', nargs='+',
                    help='phono3py kappa-mxxx.hdf5(s).')
parser.add_argument('-c', '--colour', metavar='colour', nargs='+',
                    help='Colour(s). Default: default colour cycle')
parser.add_argument('-d', '--direction', metavar='direction', nargs='+',
                    default='avg',
                    help='direction(s) for anisotropic data. Accepts a-c/ '
                         'x-z or average/ avg. Default: avg.')
parser.add_argument('-e', '--extension', metavar='extension', nargs='+',
                    default=['pdf'],
                    help='output extension(s). Default: pdf.')
parser.add_argument('-f', '--fill', action='store_true',
                    help='fill under line')
parser.add_argument('--fillalpha', metavar='fillalpha', type=float,
                    default=0.2,
                    help='fill opacity (0-1). Only works if --colour is '
                         '#RRGGBB. Default: 0.2.')
parser.add_argument('-l', '--label', metavar='label', nargs='+',
                    help='legend label(s). Accepts maths notation. '
                         'Default: None.')
parser.add_argument('--large', action='store_true',
                    help='use large axes.')
parser.add_argument('--legend_title', metavar='title',
                    help='legend title. Accepts maths. Default: None.')
parser.add_argument('--linestyle', metavar='linestyle', nargs='+',
                    default='solid',
                    help='linestyle(s). Default: solid.')
parser.add_argument('-m', '--mfp', action='store_true',
                    help='plot mean free path on the x axis instead of '
                         'frequency.')
parser.add_argument('--marker', metavar='marker', nargs='+',
                    help='marker(s). Default: None.')
parser.add_argument('--minkappa', metavar='minkappa', type=float, default=1,
                    help='minimum kappa to plot for --mfp in percent. '
                         'Default: 1.')
parser.add_argument('--noline', action='store_false',
                    help='remove line.')
parser.add_argument('-o', '--output', metavar='file', default='tp-cumkappa',
                    help='output filename, sans extension. '
                         'Default: tp-cumkappa.')
parser.add_argument('-p', '--percent', action='store_true',
                    help='plot kappa in percent of total.')
parser.add_argument('-s', '--style', metavar='style', nargs='+', default=[],
                    help='style sheet to overlay. Later ones override '
                         'earlier ones.')
parser.add_argument('-t', '--temperature', metavar='temperature', type=float,
                    default=300,
                    help='temperature in K. Default: 300')
parser.add_argument('--xmin', metavar='xmin', type=float,
                    help='override minimum x. Default: None.')

args=parser.parse_args()

import matplotlib.pyplot as plt
import tp

axes = tp.axes.one_large if args.large else tp.axes.one
if args.label is None:
    fig, ax = axes.plain(args.style)
else:
    fig, ax, add_legend = axes.medium_legend(args.style)

if args.mfp:
    data = [tp.data.load.phono3py(f, ['mode_kappa', 'mean_free_path']) for f in args.file]
    tp.plot.mfp.add_cum_kappa(ax, data, temperature=args.temperature,
                              direction=args.direction, colour=args.colour,
                              fill=args.fill, fillcolour=args.fillalpha,
                              line=args.noline, kmin=args.minkappa,
                              scale=args.percent, linestyle=args.linestyle,
                              marker=args.marker, label=args.label)
else:
    data = [tp.data.load.phono3py(f, ['mode_kappa', 'frequency']) for f in args.file]
    tp.plot.frequency.add_cum_kappa(ax, data, temperature=args.temperature,
                                    direction=args.direction,
                                    colour=args.colour, fill=args.fill,
                                    fillcolour=args.fillalpha, line=args.noline,
                                    scale=args.percent, marker=args.marker,
                                    linestyle=args.linestyle, label=args.label)

if args.large:
    if args.mfp:
        ax.set_xlabel(tp.settings.large_labels()['mean_free_path'])
    if args.percent:
        ax.set_ylabel(tp.settings.large_labels()['cumulative_percent'])
    else:
        ax.set_ylabel(tp.settings.large_labels()['cumulative_kappa'])

if args.label is not None:
    add_legend(title="${}$".format(args.legend_title))

for ext in args.extension:
    plt.savefig('{}.{}'.format(args.output, ext))
