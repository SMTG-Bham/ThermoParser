#!/usr/bin/env python3

import argparse

parser = argparse.ArgumentParser(
         description='Plot cumulative kappa against frequency or mean '
                     'free path.')
parser.add_argument('file',
                    help='phono3py kappa-mxxx.hdf5.')
parser.add_argument('-c', '--colour', metavar='colour', default='#000000',
                    help='Colour. Default: #000000.')
parser.add_argument('-d', '--direction', metavar='direction', default='avg',
                    help='direction for anisotropic data. Accepts a-c/ '
                         'x-z or average/ avg. Default: avg.')
parser.add_argument('-e', '--extension', metavar='extension', nargs='+',
                    default=['pdf'],
                    help='output extension(s). Default: pdf.')
parser.add_argument('-f', '--fill', action='store_true',
                    help='fill under line')
parser.add_argument('--fillalpha', metavar='fillalpha', type=float,
                    default=0.2,
                    help='fill opacity (0-1). Only works if --colour is '
                         '#RRGGBB. Default: 0.2.')
parser.add_argument('--large', action='store_true',
                    help='use large axes.')
parser.add_argument('-m', '--mfp', action='store_true',
                    help='plot mean free path on the x axis instead of '
                         'frequency.')
parser.add_argument('--minkappa', metavar='minkappa', type=float,
                    help='minimum kappa to plot for --mfp in percent. '
                         'Default: 1.')
parser.add_argument('--noline', action='store_false',
                    help='remove line.')
parser.add_argument('-o', '--output', metavar='file', default='tp-cumkappa',
                    help='output filename, sans extension. '
                         'Default: tp-cumkappa.')
parser.add_argument('-s', '--style', metavar='style', nargs='+', default=[],
                    help='style sheet to overlay. Later ones override '
                         'earlier ones.')
parser.add_argument('-t', '--temperature', metavar='temperature', type=float,
                    default=300,
                    help='temperature in K. Default: 300')
parser.add_argument('--xmin', metavar='xmin', type=float,
                    help='override minimum x. Default: None.')

args=parser.parse_args()

import matplotlib.pyplot as plt
import tp

axes = tp.axes.one_large if args.large else tp.axes.one
fig, ax = axes.plain(args.style)

if args.mfp:
    data = tp.data.load.phono3py(args.file, ['mode_kappa', 'mean_free_path'])
    tp.plot.mfp.add_cum_kappa(ax, data, temperature=args.temperature,
                              direction=args.direction, colour=args.colour,
                              fill=args.fill, fillcolour=args.fillalpha,
                              line=args.noline, kmin=args.minkappa)
else:
    data = tp.data.load.phono3py(args.file, ['mode_kappa', 'frequency'])
    tp.plot.frequency.add_cum_kappa(ax, data, temperature=args.temperature,
                                    direction=args.direction,
                                    colour=args.colour, fill=args.fill,
                                    fillcolour=args.fillalpha, line=args.noline)

if args.large:
    if args.mfp:
        ax.set_xlabel(tp.settings.large_labels()['mean_free_path'])
    ax.set_ylabel(tp.settings.large_labels()['cumulative_kappa'])

for ext in args.extension:
    plt.savefig('{}.{}'.format(args.output, ext))
