#!/usr/bin/env python3

import argparse

parser = argparse.ArgumentParser(
         description='Plots a lattice thermal conductivity heatmap '
                     'against temperature and carrier concentration '
                     'for a target ZT.')
parser.add_argument('file',
                    help='electronic transport (transport_xxx.json or '
                         'boltztrap.hdf5).')
parser.add_argument('-z', '--zt', metavar='ZT', type=float, default=2,
                    help='target ZT. Default: 2.')
parser.add_argument('-c', '--colour', metavar='colour', nargs='+',
                    default=['viridis'],
                    help='colourmap name or key colour or min and max '
                         'colours to generate a colourmap from. '
                         'Default: viridis.')
parser.add_argument('-d', '--direction', metavar='direction', default='avg',
                    help='direction for anisotropic data. Accepts a-c/ '
                         'x-z or average/ avg. Default: avg.')
parser.add_argument('--nodata', action='store_true',
                    help='do not print data file.')
parser.add_argument('-e', '--extension', metavar='extension', nargs='+',
                    default=['pdf'],
                    help='output extension(s). Default: pdf.')
parser.add_argument('-i', '--interpolate', metavar='interpolate', type=int,
                    default=200,
                    help='number of points to interpolate to on each '
                         'axis. Default: 200.')
parser.add_argument('--kind', metavar='kind', default='linear',
                    help='interpolation kind. Default: linear.')
parser.add_argument('--large', action='store_true',
                    help='use large axes.')
parser.add_argument('-o', '--output', metavar='file',
                    default='tp-kappa-target',
                    help='output filename, sans extension. '
                         'Default: tp-kappa-target.')
parser.add_argument('-s', '--style', metavar='style', nargs='+', default=[],
                    help='style sheet to overlay. Later ones override '
                         'earlier ones.')
parser.add_argument('--xmin', metavar='xmin', type=float,
                    help='override minimum temperature. Default: None.')
parser.add_argument('--xmax', metavar='xmax', type=float,
                    help='override maximum temperature. Default: None.')
parser.add_argument('--ymin', metavar='ymin', type=float,
                    help='override minimum doping. Default: None.')
parser.add_argument('--ymax', metavar='ymax', type=float,
                    help='override maximum doping. Default: None.')
parser.add_argument('--cmin', metavar='cmin', type=float, default=0,
                    help='override minimum kl. Default: 0.')
parser.add_argument('--cmax', metavar='cmax', type=float,
                    help='override maximum kl. Default: None.')

args=parser.parse_args()

import matplotlib.pyplot as plt
import tp

axes = tp.axes.one_large if args.large else tp.axes.one
if len(args.colour) == 1:
    args.colour = args.colour[0]
if args.nodata:
    ztdata = None
else:
    ztdata = 'kl-{}.hdf5'.format(args.direction)

try:
    edata = tp.data.load.amset(args.file)
except Exception:
    edata = tp.data.load.boltztrap(args.file)

fig, ax = axes.colourbar(args.style)

cbar = tp.plot.heatmap.add_kappa_target(ax, edata, zt=args.zt,
                                        direction=args.direction,
                                        xinterp=args.interpolate,
                                        yinterp=args.interpolate,
                                        kind=args.kind, colour=args.colour,
                                        xmin=args.xmin, xmax=args.xmax,
                                        ymin=args.ymin, ymax=args.ymax,
                                        cmin=args.cmin, cmax=args.cmax,
                                        output=ztdata)

if args.large:
    cbar.set_label(tp.settings.large_labels()['lattice_thermal_conductivity'])

for ext in args.extension:
    plt.savefig('{}.{}'.format(args.output, ext))
