#!/usr/bin/env python3

import argparse
import numpy as np

parser = argparse.ArgumentParser(
         description='Plots a ZT heatmap against temperature and '
                     'carrier concentration.')
parser.add_argument('file',
                    help='Electronic transport data, e.g. amset '
                         'transport_xxx.json or boltztrap.hdf5 or '
                         'zt.hdf5 written by this script.')
parser.add_argument('-k', '--kappa', metavar='file',
                    help='phono3py kappa-mxxx.hdf5. Ignored if ZT is '
                         'in the electronic data file.')
parser.add_argument('-c', '--colour', metavar='colour', nargs='+',
                    default=['viridis'],
                    help='colourmap name or key colour or min and max '
                         'colours to generate a colourmap from. '
                         'Default: viridis.')
parser.add_argument('-d', '--direction', metavar='direction', default='avg',
                    help='direction for anisotropic data. Accepts a-c/ '
                         'x-z or average/ avg. Default: avg.')
parser.add_argument('--nodata', action='store_true',
                    help='do not print data file.')
parser.add_argument('-e', '--extension', metavar='extension', nargs='+',
                    default=['pdf'],
                    help='output extension(s). Default: pdf.')
parser.add_argument('-i', '--interpolate', metavar='interpolate', type=int,
                    default=200,
                    help='number of points to interpolate to on each '
                         'axis. Default: 200.')
parser.add_argument('--kind', metavar='kind', default='linear',
                    help='interpolation kind. Default: linear.')
parser.add_argument('--large', action='store_true',
                    help='use large axes.')
parser.add_argument('-o', '--output', metavar='file', default='tp-ztmap',
                    help='output filename, sans extension. '
                         'Default: tp-ztmap.')
parser.add_argument('-s', '--style', metavar='style', nargs='+', default=[],
                    help='style sheet to overlay. Later ones override '
                         'earlier ones.')
parser.add_argument('-t', '--type', metavar='doping', default='n',
                    help='type of doping in BoltzTraP. Must be n or p. '
                         'Default: n.')
parser.add_argument('--xmin', metavar='xmin', type=float,
                    help='override minimum temperature. Default: None.')
parser.add_argument('--xmax', metavar='xmax', type=float,
                    help='override maximum temperature. Default: None.')
parser.add_argument('--ymin', metavar='ymin', type=float,
                    help='override minimum doping. Default: None.')
parser.add_argument('--ymax', metavar='ymax', type=float,
                    help='override maximum doping. Default: None.')
parser.add_argument('--cmin', metavar='cmin', type=float,
                    help='override minimum ZT. Default: None.')
parser.add_argument('--cmax', metavar='cmax', type=float,
                    help='override maximum ZT. Default: None.')

args=parser.parse_args()

import h5py
import matplotlib.pyplot as plt
import tp

axes = tp.axes.one_large if args.large else tp.axes.one
if len(args.colour) == 1:
    args.colour = args.colour[0]
if args.nodata:
    ztdata = None
else:
    ztdata = 'zt-{}-{}.hdf5'.format(args.type, args.direction)

try:
    edata = tp.data.load.amset(args.file)
except Exception:
    try:
        edata = tp.data.load.boltztrap(args.file, doping=args.type)
    except Exception:
        data = h5py.File(args.file, 'r')
        edata = dict(data)
        for key in edata.keys():
            if isinstance(edata[key], dict) and args.type in edata[key]:
                edata[key] = edata[key][args.type][()]

if args.kappa is not None:
    kdata = tp.data.load.phono3py(args.kappa)
else:
    kdata = None

fig, ax = axes.colourbar(args.style)

tp.plot.heatmap.add_ztmap(ax, edata, kdata=kdata, direction=args.direction,
                          xinterp=args.interpolate, yinterp=args.interpolate,
                          kind=args.kind, colour=args.colour, xmin=args.xmin,
                          xmax=args.xmax, ymin=args.ymin, ymax=args.ymax,
                          cmin=args.cmin, cmax=args.cmax, output=ztdata)





data = h5py.File(ztdata, 'r')  # using the zt-{}-{}.hdf5 file
ZT = list(data['zt'])
temp = list(data['temperature'])
conc = list(data['doping'])
klatt = list(data['lattice_thermal_conductivity'])

# Finds maximum ZT and the corresponding temperature and concentration, and prints it on the plot

max_zt = np.max(ZT)
max_zt_index = np.where(ZT==max_zt)
temp_at_max_zt = temp[max_zt_index[0][0]]
conc_at_max_zt = conc[max_zt_index[1][0]]
cround = np.format_float_scientific(conc_at_max_zt,precision=2,exp_digits=2).replace('e+','x10^')
cround = cround.split('x10^')

klatt_at_max_zt = klatt[max_zt_index[0][0]] # klatt is independent of doping concentration

ax.text(0.5, 0.25, r'Max ZT = $\bf{{{:.3f}}}$ ({:.0f} K, ${}x10^{{{}}}\ cm^{{-3}}$)'.format(max_zt, temp_at_max_zt, cround[0],cround[1]), horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=24, fontweight='bold')


# Finds room temperature ZT and the corresponding concentration

rt_index = temp.index(300)
max_zt_at_rt = np.max(ZT[rt_index])
rt_zt_index = np.where(ZT==max_zt_at_rt)
conc_at_rt_zt = conc[rt_zt_index[1][0]]

klatt_at_rt_zt = klatt[rt_index]

# Prints maximum and rt ZT and temp, conc and klatt to a file

with open('info.txt', 'w') as file:
    file.write(" ".join(['Temp', 'Conc', 'ZT', 'klatt', '\n',
              '300K', str(np.format_float_scientific(conc_at_rt_zt,precision=2,exp_digits=2)), '{:.3}'.format(max_zt_at_rt), '{:.3f}'.format(klatt_at_rt_zt), '\n',
              '{:.0f}K'.format(temp_at_max_zt), str(np.format_float_scientific(conc_at_max_zt,precision=2,exp_digits=2)), '{:.3f}'.format(max_zt), '{:.3f}'.format(klatt_at_max_zt)]))



for ext in args.extension:
    plt.savefig('{}.{}'.format(args.output, ext))
